---
name: ci
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
    tags:
      - '*'

jobs:
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  docs:
    name: docs
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Check documentation
        env:
          RUSTDOCFLAGS: -D warnings
        run: cargo doc --no-deps --document-private-items --workspace

  build:
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-20.04
            use-cross: true
          - target: arm-unknown-linux-gnueabihf
            os: ubuntu-20.04
            use-cross: true
          - target: arm-unknown-linux-musleabihf
            os: ubuntu-20.04
            use-cross: true
          - target: x86_64-apple-darwin
            os: macos-10.15
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-20.04
            use-cross: true
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install prerequisites
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            arm-unknown-linux-*)
              sudo apt-get -y update
              sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
            aarch64-unknown-linux-gnu)
              sudo apt-get -y update
              sudo apt-get -y install gcc-aarch64-linux-gnu ;;
          esac

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true
          profile: minimal

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Load cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.job.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: build
          args: --locked --release --target=${{ matrix.job.target }}

      - name: Run tests
        uses: actions-rs/cargo@v1
        if: ${{ matrix.job.use-cross != true }}
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: test
          args: --locked --target=${{ matrix.job.target }}

      - name: Strip debug information from executable
        id: strip
        shell: bash
        run: |
          bin_name=dts
          bin_dir=release-artifacts/
          bin_path="${bin_dir}/${bin_name}"

          mkdir -p "$bin_dir"

          case ${{ matrix.job.target }} in
            arm-unknown-linux-*)
              strip="arm-linux-gnueabihf-strip" ;;
            aarch64-unknown-linux-gnu)
              strip="aarch64-linux-gnu-strip" ;;
            *)
              strip=strip ;;
          esac;

          "$strip" -o "$bin_path" \
            "target/${{ matrix.job.target }}/release/${bin_name}"

          echo ::set-output name=bin_name::${bin_name}
          echo ::set-output name=bin_path::${bin_path}

      - name: Create tarball
        id: package
        shell: bash
        run: |
          bin_name="${{ steps.strip.outputs.bin_name }}"
          pkg_version="$(sed -n \
            's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)"
          pkg_basename="${bin_name}-v${pkg_version}-${{ matrix.job.target }}"
          pkg_name="${pkg_basename}.tar.gz"
          pkg_staging="release-artifacts/package"
          archive_dir="${pkg_staging}/${pkg_basename}/"

          mkdir -p "$archive_dir"

          cp \
            "${{ steps.strip.outputs.bin_path }}" \
            "README.md" "LICENSE" \
            "$archive_dir"

          pushd "${pkg_staging}/" >/dev/null
          tar czf "$pkg_name" "$pkg_basename"/*
          popd >/dev/null

          echo ::set-output name=pkg_name::${pkg_name}
          echo ::set-output name=pkg_path::"${pkg_staging}/${pkg_name}"

      - name: Upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: ${{ steps.package.outputs.pkg_name }}
          path: ${{ steps.package.outputs.pkg_path }}
